{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "templatesBaseUri": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/DFE-Digital/login.dfe.infrastructure/master/"
    },
    "appServicePlanOS": {
      "type": "string",
      "metadata": {
        "description": "Windows or Linux App Service Plan"
      }
    },
    "appServicePlanIsLinux": {
      "type": "bool",
      "metadata": {
        "description": "Whether the App Service Plan is Linux or not"
      }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Name of the application insights resource"
      }
    },
    "redisCacheName": {
      "type": "string"
    },
    "redisCacheSku": {
      "type": "object",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "amplsName": {
      "type": "string"
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The admin user of the SQL Server"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin user of the SQL Server"
      }
    },
    "sqlServerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the SQL Server"
      }
    },
    "elasticPoolName": {
      "type": "string",
      "metadata": {
        "description": "The name of the SQL Elastic Pool"
      }
    },
    "databaseNames": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Azure DevOps variable format: [{\"name\":\"temp-signin-audit-db\",\"maxSizeBytes\":\"1073741824\"} N.B. use without backslash"
      }
    },
    "transparentDataEncryption": {
      "type": "string",
      "metadata": {
        "description": "Enable or disable Transparent Data Encryption (TDE) for the database."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account resource"
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Key Vault resource"
      }
    },
    "azureSearchName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Search resource"
      }
    },
    "azureCdnName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Cdn Profile resource"
      }
    },
    "azureCdnSku": {
      "type": "string",
      "defaultValue": "Standard_Verizon",
      "allowedValues": [
        "Standard_Verizon",
        "Premium_Verizon"
      ]
    },
    "cdnEndpointName": {
      "type": "string"
    },
    "cdnProfileName": {
      "type": "string"
    },
    "originName": {
      "defaultValue": "",
      "type": "string"
    },
    "originHostname": {
      "type": "string"
    },
    "customDomainName": {
      "defaultValue": "",
      "type": "string"
    },
    "CHGWIP": {
      "type": "string",
      "metadata": {
        "description": "Firewall IP"
      }
    },
    "keyvaultCertificateNames": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Names of the certificates stored in keyvault"
      }
    },
    "elasticPoolProperties": {
      "type": "object",
      "metadata": {
        "description": "Properties for the elastic pool"
      }
    },
    "frontEndAppServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "frontEndAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "id": "01",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 1
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the front-end App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "backEndAppServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "backEndAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "id": "01",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 1
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the back-end App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "workerAppServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "workerAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "id": "01",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 1
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the worker App Service Plan"
      }
    },
    "microsoftAzureWebsitesRPObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the Azure Websites RP",
        "environmentVariable": "microsoftAzureWebsitesRPObjectId"
      }
    },
    "azureDevOpsObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the Azure Websites RP",
        "environmentVariable": "azureDevOpsObjectId"
      }
    },
    "keyVaultApplicationObjectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the Key Vault application",
        "environmentVariable": "keyVaultApplicationObjectId"
      }
    },
    "destructiveVirtualNetworkDeploy": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Deploys the Virtual Network and deletes all subnets if Enabled https://github.com/Azure/azure-quickstart-templates/issues/2786",
        "environmentVariable": "destructiveVirtualNetworkDeploy"
      }
    },
    "applicationSubnets": {
      "type": "array",
      "defaultValue": [
        "acc-sn",
        "adtbus-sn",
        "adtcln-sn",
        "auth-sn",
        "app-sn",
        "ass-sn",
        "dev-sn",
        "dir-sn",
        "hlp-sn",
        "int-sn-1",
        "int-sn-2",
        "jobs-sn",
        "mng-sn",
        "oidc-sn-1",
        "oidc-sn-2",
        "org-sn",
        "orgwkr-sn",
        "papi-sn",
        "pfl-sn",
        "sch-sn",
        "schwkr-sn",
        "sup-sn-1",
        "svc-sn",
        "svc-sn-1",
        "svc-sn-2"
      ],
      "metadata": {
        "description": "Names of additional subnets to create for application integration"
      }
    },
    "platformGlobalIdentifier": {
      "type": "string",
      "defaultValue": "s141"
    },
    "environmentId": {
      "type": "string",
      "allowedValues": [
        "d01",
        "t01",
        "t02",
        "t03",
        "p01",
        "p02"
      ]
    },
    "platformGlobalName": {
      "type": "string",
      "defaultValue": "signin"
    },
    "applicationName": {
      "type": "string",
      "defaultValue": "shd"
    },
    "serviceEndpointList": {
      "type": "array",
      "defaultValue": [
        "Microsoft.Web",
        "Microsoft.Sql",
        "Microsoft.Storage",
        "Microsoft.KeyVault",
        "Microsoft.ServiceBus"
      ],
      "allowedValues": [
        "Microsoft.Web",
        "Microsoft.Sql",
        "Microsoft.Storage",
        "Microsoft.KeyVault",
        "Microsoft.ServiceBus"
      ]
    },
    "serviceBusSku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Premium",
      "metadata": {
        "description": "The messaging tier for service Bus namespace"
      }
    },
    "deployRedisCachePrivateEndpoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy a private endpoint to the Redis Cache instance"
      }
    },
    "deployamplsPrivateEndpoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy a Azure Monitor private link scope"
      }
    },
    "deployServiceBus": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy the shared Service Bus resource"
      }
    },
    "deployVirtualNetwork": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy the virtual network template which includes the defined subnets"
      }
    },
    "sqlFirewallRulesCopyMode": {
      "type": "string",
      "defaultValue": "Parallel",
      "allowedValues": [
        "Parallel",
        "Serial"
      ],
      "metadata": {
        "description": "Mode to use in the SQL firewall rule copy function. Using Serial for the initial deployment can help eliminate conflicts."
      }
    }
  },
  "variables": {
    "resourceNamePrefix": "[concat(toLower(parameters('platformGlobalIdentifier')), toLower(parameters('environmentId')),'-', toLower(parameters('platformGlobalName')),'-', toLower(parameters('applicationName')))]",
    "appInsightsName": "[concat(variables('resourceNamePrefix'),'-ai')]",
    "redisCacheName": "[concat(variables('resourceNamePrefix'),'-rc')]",
    "amplsName": "[concat(variables('resourceNamePrefix'),'-ampls')]",
    "sqlServerName": "[concat(variables('resourceNamePrefix'),'-sql')]",
    "elasticPoolName": "[concat(variables('resourceNamePrefix'),'-ep')]",
    "storageAccountName": "[concat(replace(variables('resourceNamePrefix'),'-',''),'str')]",
    "keyVaultName": "[concat(variables('resourceNamePrefix'),'-kv')]",
    "azureSearchName": "[concat(variables('resourceNamePrefix'),'-azs')]",
    "azureCdnName": "[concat(variables('resourceNamePrefix'),'-cdn')]",
    "virtualNetworkName": "[concat(variables('resourceNamePrefix'),'-vnet')]",
    "serviceBusNamespaceName": "[concat(variables('resourceNamePrefix'),'-sbn')]",
    "serviceBusApiVersion": "2017-04-01",
    "redisSubnetName": "redis-sn-1",
    "amplsSubnetName": "ampls-sn-1",
    "elasticSku": {
      "name": "ElasticPool",
      "tier": "Standard"
    },
    "emptyArray": [],
    "redisCachePrivateEndpoint": {
      "privateDnsZoneName": "privatelink.redis.cache.windows.net",
      "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
      "privateEndpointName": "[concat(parameters('redisCacheName'),'-', variables('redisSubnetName'), '-pe')]",
      "privateLinkResource": "[resourceId('Microsoft.Cache/Redis', parameters('redisCacheName'))]",
      "privateEndpointSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('redisSubnetName'))]"
    },
    "azureMonitorPrivateEndpoint": {
      "amplsPrivateDNSZoneName": "[concat(parameters('amplsName'), '-Private-DNS-Zone')]",
      "amplsAgentsvcPrivateDnsZoneName": "privatelink.agentsvc.azure-automation.net",
      "amplsBlobPrivateDnsZoneName": "privatelink.blob.core.windows.net",
      "amplsMonitorPrivateDnsZoneName": "privatelink.monitor.azure.com",
      "amplsOPInsightODSPrivateDnsZoneName": "privatelink.ods.opinsights.azure.com",
      "amplsOPInsightOMSPrivateDnsZoneName": "privatelink.oms.opinsights.azure.com",
      "amplsVirtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
      "amplsVirtualNetworkName": "[variables('virtualNetworkName')]",
      "amplsPrivateEndpointName": "[concat(parameters('amplsName'), '-pe')]",
      "amplsPrivateLinkResource": "[resourceId('Microsoft.insights/privateLinkScopes', parameters('amplsName'))]",
      "amplsPrivateEndpointSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('amplsSubnetName'))]"
    },
    "keyVaultAccessPolicies": [
      {
        "objectId": "[parameters('microsoftAzureWebsitesRPObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "secrets": [
            "Get",
            "List",
            "Set",
            "Delete",
            "Recover",
            "Backup",
            "Restore"
          ]
        }
      },
      {
        "objectId": "[parameters('keyVaultApplicationObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "secrets": [
            "Get",
            "List",
            "Set",
            "Delete",
            "Recover",
            "Backup",
            "Restore"
          ]
        }
      },
      {
        "objectId": "[parameters('azureDevOpsObjectId')]",
        "tenantId": "[subscription().tenantId]",
        "permissions": {
          "keys": [
            "Get",
            "List",
            "Update",
            "Create",
            "Import",
            "Delete",
            "Recover",
            "Backup",
            "Restore",
            "Decrypt",
            "Encrypt",
            "UnwrapKey",
            "WrapKey",
            "Verify",
            "Sign"
          ],
          "secrets": [
            "Get",
            "List",
            "Set",
            "Delete",
            "Recover",
            "Backup",
            "Restore"
          ],
          "certificates": [
            "Get",
            "List",
            "Update",
            "Create",
            "Import",
            "Delete",
            "Recover",
            "Backup",
            "Restore",
            "ManageContacts",
            "ManageIssuers",
            "GetIssuers",
            "ListIssuers",
            "SetIssuers",
            "DeleteIssuers"
          ]
        }
      }
    ]
  },
  "resources": [
    {
      "condition": "[greater(length(parameters('frontEndAppServicePlanName')), 0)]",
      "apiVersion": "2020-10-01",
      "name": "[concat('front-end-app-service-plan','-',parameters('frontEndAppServicePlanSku')[copyIndex()].id)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('frontEndAppServicePlanName'),'-',parameters('frontEndAppServicePlanSku')[copyIndex()].id)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('frontEndAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "[parameters('appServicePlanOS')]"
          },
          "appServicePlanIsLinux": {
            "value": "[parameters('appServicePlanIsLinux')]"
          }
        }
      },
      "copy": {
        "name": "FeAspCopy",
        "count": "[length(parameters('frontEndAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[greater(length(parameters('backEndAppServicePlanName')), 0)]",
      "apiVersion": "2020-10-01",
      "name": "[concat('back-end-app-service-plan','-',parameters('backEndAppServicePlanSku')[copyIndex()].id)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('backEndAppServicePlanName'),'-',parameters('backEndAppServicePlanSku')[copyIndex()].id)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "[parameters('appServicePlanOS')]"
          },
          "appServicePlanIsLinux": {
            "value": "[parameters('appServicePlanIsLinux')]"
          }
        }
      },
      "copy": {
        "name": "BeAspCopy",
        "count": "[length(parameters('backEndAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[greater(length(parameters('workerAppServicePlanName')), 0)]",
      "apiVersion": "2020-10-01",
      "name": "[concat('worker-app-service-plan','-',parameters('workerAppServicePlanSku')[copyIndex()].id)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('workerAppServicePlanName'),'-',parameters('backEndAppServicePlanSku')[copyIndex()].id)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('workerAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "[parameters('appServicePlanOS')]"
          },
          "appServicePlanIsLinux": {
            "value": "[parameters('appServicePlanIsLinux')]"
          }
        }
      },
      "copy": {
        "name": "WkrAspCopy",
        "count": "[length(parameters('workerAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "redis-cache",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'Shared/redis-cache.json')]"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[parameters('redisCacheName')]"
          },
          "redisCacheSku": {
            "value": "[parameters('redisCacheSku')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployRedisCachePrivateEndpoint')]",
      "apiVersion": "2020-10-01",
      "name": "redis-cache-private-endpoint",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'Shared/redis-cache-private-endpoint.json')]"
        },
        "parameters": {
          "templatesBaseUri": {
            "value": "[parameters('templatesBaseUri')]"
          },
          "privateEndpointName": {
            "value": "[variables('redisCachePrivateEndpoint').privateEndpointName]"
          },
          "privateLinkResource": {
            "value": "[variables('redisCachePrivateEndpoint').privateLinkResource]"
          },
          "privateEndpointSubnetId": {
            "value": "[variables('redisCachePrivateEndpoint').privateEndpointSubnetId]"
          },
          "privateDnsZoneName": {
            "value": "[variables('redisCachePrivateEndpoint').privateDnsZoneName]"
          },
          "virtualNetworkId": {
            "value": "[variables('redisCachePrivateEndpoint').virtualNetworkId]"
          },
          "redisCacheName": {
            "value": "[parameters('redisCacheName')]"
          },
          "redisCacheSku": {
            "value": "[parameters('redisCacheSku')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'redis-cache')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[parameters('deployamplsPrivateEndpoint')]",
      "apiVersion": "2020-10-01",
      "name": "ampls",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'Shared/ampls.json')]"
        },
        "parameters": {
          "amplsName": {
            "value": "[parameters('amplsName')]"
          },
          "appInsightsName": {
            "value": "[parameters('appInsightsName')]"
          },
          "amplsPrivateEndpointName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateEndpointName]"
          },
          "amplsPrivateLinkResource": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateLinkResource]"
          },
          "amplsPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateDnsZoneName]"
          },
          "amplsAgentsvcPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsAgentsvcPrivateDnsZoneName]"
          },
          "amplsBlobPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsBlobPrivateDnsZoneName]"
          },
          "amplsMonitorPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsMonitorPrivateDnsZoneName]"
          },
          "amplsOPInsightODSPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsOPInsightODSPrivateDnsZoneName]"
          }, 
          "amplsOPInsightOMSPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsOPInsightOMSPrivateDnsZoneName]"
          },
          "amplsPrivateEndpointSubnetId": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateEndpointSubnetId]"
          },
          "amplsVirtualNetworkId": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsvirtualNetworkId]"
          },
          "amplsVirtualNetworkName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsVirtualNetworkName]"
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Resources/deployments', 'virtual-network')]",
          "[resourceId('Microsoft.Resources/deployments', 'app-insights')]"
        ]
      }
    },
    {
      "name": "sql-server",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/azure-sql.json')]"
        },
        "parameters": {
          "sqlAdministratorLogin": {
            "value": "[parameters('sqlAdministratorLogin')]"
          },
          "sqlAdministratorLoginPassword": {
            "value": "[parameters('sqlAdministratorLoginPassword')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServerName')]"
          },
          "elasticPoolName": {
            "value": "[parameters('elasticPoolName')]"
          },
          "CHGWIP": {
            "value": "[parameters('CHGWIP')]"
          },
          "elasticPoolProperties": {
            "value": "[parameters('elasticPoolProperties')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "apiVersion": "2020-10-01",
      "name": "sql-server-firewall-rule",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'Shared/sql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[parameters('sqlServerName')]"
          },
          "subnetResourceIdList": {
            "value": "[if(parameters('deployVirtualNetwork'), reference('get-subnet-resourceid-list', '2020-10-01').outputs.subnetResourceIdList.value, variables('emptyArray'))]"
          },
          "copyMode": {
            "value": "[parameters('sqlFirewallRulesCopyMode')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]"
      ]
    },
    {
      "condition": "[not(empty(parameters('databaseNames')))]",
      "name": "[if(empty(parameters('databaseNames')),'no-databases-to-deploy',parameters('databaseNames')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/database.json')]"
        },
        "parameters": {
          "databaseName": {
            "value": "[parameters('databaseNames')[copyIndex()].name]"
          },
          "transparentDataEncryption": {
            "value": "[parameters('transparentDataEncryption')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServerName')]"
          },
          "elasticPoolName": {
            "value": "[parameters('elasticPoolName')]"
          },
          "databaseMaxSizeBytes": {
            "value": "[parameters('databaseNames')[copyIndex()].maxSizeBytes]"
          },
          "databaseSku": {
            "value": "[if(contains(parameters('databaseNames')[copyIndex()], 'sku'), parameters('databaseNames')[copyIndex()].sku, variables('elasticSku'))]"
          }
        }
      },
      "copy": {
        "name": "databasecopy",
        "count": "[length(parameters('databaseNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]"
      ]
    },
    {
      "name": "app-insights",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/app-insights.json')]"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[parameters('appInsightsName')]"
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "storage-account",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "https://raw.githubusercontent.com/DFE-Digital/login.dfe.infrastructure/feature/DSI-2942/Shared/storage-account.json"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "ipRules": {
            "value": [{
              "value": "147.243.0.0/16",
              "action": "Allow"
            }]
          },
          "NetFirewall":{
              "value": true
          }
        }
      }
    },
    {
      "name": "key-vault",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/key-vault.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultAccessPolicies": {
            "value": "[variables('keyVaultAccessPolicies')]"
          }
        }
      }
    },
    {
      "name": "azure-search",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/azure-search.json')]"
        },
        "parameters": {
          "azureSearchName": {
            "value": "[parameters('azureSearchName')]"
          }
        }
      }
    },
    {
      "name": "azure-cdn",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/azure-cdn.json')]"
        },
        "parameters": {
          "cdnProfileName": {
            "value": "[parameters('azureCdnName')]"
          },
          "azureCdnSku": {
            "value": "[parameters('azureCdnSku')]"
          }
        }
      }
    },
    {
      "name": "azure-cdn-endpoint",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/azure-cdn-endpoint.json')]"
        },
        "parameters": {
          "cdnEndpointName": {
            "value": "[parameters('cdnEndpointName')]"
          },
          "cdnProfileName": {
            "value": "[parameters('cdnProfileName')]"
          },
          "originName": {
            "value": "[parameters('originName')]"
          },
          "originHostname": {
            "value": "[parameters('originHostname')]"
          },
          "customDomainName": {
            "value": "[parameters('customDomainName')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'storage-account')]",
        "[resourceId('Microsoft.Resources/deployments', 'azure-cdn')]"
      ]
    },
    {
      "condition": "[greater(length(parameters('keyvaultCertificateNames')), 0)]",
      "name": "[concat('app-service-certificates', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/app-service-certificate.json')]"
        },
        "parameters": {
          "keyVaultCertificateName": {
            "value": "[parameters('keyvaultCertificateNames')[copyIndex()]]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[resourceGroup().name]"
          }
        }
      },
      "copy": {
        "name": "certCopy",
        "count": "[length(parameters('keyvaultCertificateNames'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'key-vault')]"
      ]
    },
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "apiVersion": "2020-10-01",
      "name": "virtual-network",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'), 'Shared/network.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templatesBaseUri": {
            "value": "[parameters('templatesBaseUri')]"
          },
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "destructiveVirtualNetworkDeploy": {
            "value": "[parameters('destructiveVirtualNetworkDeploy')]"
          },
          "redisSubnet": {
            "value": "[array(variables('redisSubnetName'))]"
          },
          "amplsSubnet": {
            "value": "[array(variables('amplsSubnetName'))]"
          },
          "applicationSubnets": {
            "value": "[parameters('applicationSubnets')]"
          },
          "serviceEndpointList": {
            "value": "[parameters('serviceEndpointList')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "apiVersion": "2020-10-01",
      "name": "get-subnet-resourceid-list",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'utilities/getSubnetResourceIdList.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          },
          "subnetConfiguration": {
            "value": "[if(parameters('deployVirtualNetwork'), reference('virtual-network').outputs.applicationSubnetConfiguration.value, variables('emptyArray'))]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployServiceBus')]",
      "apiVersion": "2020-10-01",
      "name": "service-bus",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'Shared/service-bus.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serviceBusNamespaceName": {
            "value": "[variables('serviceBusNamespaceName')]"
          },
          "serviceBusSku": {
            "value": "[parameters('serviceBusSku')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployServiceBus')]",
      "name": "delay-service-bus-key-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments','service-bus')]",
        "[resourceId('Microsoft.Resources/deployments','key-vault')]"
      ],
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "sharedServiceBusConnectionString"
          },
          "secretResourceId": {
            "value": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusNamespaceName'), 'RootManageSharedAccessKey')]"
          },
          "contentType": {
            "value": "Shared service bus connection string"
          },
          "templateUri": {
            "value": "[concat(parameters('templatesBaseUri'),'Shared/key-vault-secret.json')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "secretName": {
              "type": "string"
            },
            "secretResourceId": {
              "type": "string"
            },
            "contentType": {
              "type": "string"
            },
            "templateUri": {
              "type": "string"
            }
          },
          "variables": {},
          "resources": [
            {
              "apiVersion": "2020-10-01",
              "name": "add-service-bus-key-vault-secret",
              "type": "Microsoft.Resources/deployments",
              "properties": {
                "mode": "Incremental",
                "templateLink": {
                  "uri": "[parameters('templateUri')]",
                  "contentVersion": "1.0.0.0"
                },
                "parameters": {
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "secretName": {
                    "value": "[parameters('secretName')]"
                  },
                  "secretValue": {
                    "value": "[listkeys(parameters('secretResourceId'), '2017-04-01').primaryConnectionString]"
                  },
                  "contentType": {
                    "value": "[parameters('contentType')]"
                  }
                }
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[and(parameters('deployVirtualNetwork'), parameters('deployServiceBus'))]",
      "apiVersion": "2020-10-01",
      "name": "service-bus-firewall-rule",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'Shared/service-bus-network-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serviceBusNamespaceName": {
            "value": "[variables('serviceBusNamespaceName')]"
          },
          "subnetResourceIdList": {
            "value": "[if(parameters('deployVirtualNetwork'), reference('get-subnet-resourceid-list', '2020-10-01').outputs.subnetResourceIdList.value, variables('emptyArray'))]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]"
      ]
    }
  ],
  "outputs": {}
}
