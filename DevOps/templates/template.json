{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "templatesBaseUri": {
      "type": "string"
    },
    "AccessToken": {
        "type": "string",
        "metadata": {
            "description": "Token that will acces the private repo from the logic app"
        }
    },
    "branch": {
        "type": "string",
        "defaultValue": "feature/DSI-7240",
        "metadata": {
            "description": "Branch that use for the ARM templateLinks"
        }
    },
    "appInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Name of the application insights resource"
      }
    },
    "redisCacheName": {
      "type": "string"
    },
    "redisCacheSku": {
      "type": "object",
      "defaultValue": "",
      "metadata": {
        "description": ""
      }
    },
    "amplsName": {
      "type": "string"
    },
    "sqlAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The admin user of the SQL Server"
      }
    },
    "sqlAdministratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password of the admin user of the SQL Server"
      }
    },
    "sqlserverName": {
      "type": "string",
      "metadata": {
        "description": "The name of the SQL Server"
      }
    },
    "elasticPoolName": {
      "type": "string",
      "metadata": {
        "description": "The name of the SQL Elastic Pool"
      }
    },
    "databaseNames": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Azure DevOps variable format: [{\"name\":\"temp-signin-audit-db\",\"maxSizeBytes\":\"1073741824\"} N.B. use without backslash"
      }
    },
    "transparentDataEncryption": {
      "type": "string",
      "metadata": {
        "description": "Enable or disable Transparent Data Encryption (TDE) for the database."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account resource"
      }
    },
    "storageAccountProvProfName": {
      "type": "string",
      "metadata": {
        "description": "Name of the storage account resource for provide Profile"
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Key Vault resource"
      }
    },
    "storageIdenityName": {
      "type": "string",
      "metadata": {
        "description": "Name of the managed identity resource"
      }
    },
    "azureSearchName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Search resource"
      }
    },
    "azureDataFactoryName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Data Factory resource"
      }
    },
    "azureCdnName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Cdn Profile resource"
      }
    },
    "azureCdnSku": {
      "type": "string",
      "defaultValue": "Standard_Verizon",
      "allowedValues": [
        "Standard_Verizon",
        "Premium_Verizon"
      ]
    },
    "cdnEndpointName": {
      "type": "string"
    },
    "originName": {
      "defaultValue": "",
      "type": "string"
    },
    "originHostname": {
      "type": "string"
    },
    "customDomainName": {
      "defaultValue": "",
      "type": "string"
    },
    "CHGWIP": {
      "type": "string",
      "metadata": {
        "description": "GovWiFi | Purple | Guest"
      }
    },
    "elasticPoolSku": {
      "type": "object",
      "metadata": {
        "description": "SKU for the elastic pool"
      }
    },
    "elasticPoolProperties": {
      "type": "object",
      "metadata": {
        "description": "Properties for the elastic pool"
      }
    },
    "destructiveVirtualNetworkDeploy": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Deploys the Virtual Network and deletes all subnets if Enabled https://github.com/Azure/azure-quickstart-templates/issues/2786",
        "environmentVariable": "destructiveVirtualNetworkDeploy"
      }
    },
    "applicationSubnets": {
      "type": "array",
      "defaultValue": [
        "samltier-g1-sn",
        "samltier-g2-sn",
        "prestier-g1-sn",
        "prestier-g2-sn",
        "prestier-g3-sn",
        "prestier-g4-sn",
        "prestier-g5-sn",
        "midtier-g1-sn",
        "midtier-g2-sn",
        "midtier-g3-sn",
        "backend-g1-sn",
        "backend-g3-sn",
        "utils-sn",
        "backend-g2-sn",
        "backend-g4-sn",
        "backend-g5-sn"
      ],
      "metadata": {
        "description": "Names of additional subnets to create for application integration"
      }
    },
     "pireanSubnets": {
      "type": "array",
      "defaultValue": [
        "pmppsyncfa-sn",
        "pmppsyncst-sn",
        "pmpporgssyncfa-sn",
        "pmpporgssyncst-sn",
        "pmppprodeltast-collect-sn",
        "pmppprodeltast-dqt-sn",
        "pmppprodeltast-s2s-sn",
        "pmppprodeltafa-sn",
        "pmppprodeltast-sn"
      ],
      "metadata": {
        "description": "Names of pirean subnets to create for service bus integration"
      }
    },
    "TopicNames": {
      "type": "array",
      "defaultValue": [
        {
          "name": "audit",
          "subscription":"audit-messages",
          "secretNameTopic": "auditServiceBusTopicName",
          "secretNameSubscription": "auditServiceBusSubscriptionName"
        },
        {
          "name": "securealert",
          "subscription":"securealert-messages",
          "secretNameTopic": "secureServiceBusTopicName",
          "secretNameSubscription": "secureServiceBusSubscriptionName"
        },
        {
          "name": "providerprofilesync",
          "subscription":"ppsyncstatus-messages",
          "secretNameTopic": "provprofServiceBusTopicName",
          "secretNameSubscription": "provprofServiceBusSubscriptionName"
        },
        {
          "name": "providerprofilesupport",
          "subscription":"ppsupport-messages",
          "secretNameTopic": "provprofSupServiceBusTopicName",
          "secretNameSubscription": "provprofSupServiceBusSubscriptionName"
        },
        {
          "name": "providerprofilecache",
          "subscription":"ppcachestatus-messages",
          "secretNameTopic": "provprofcacheServiceBusTopicName",
          "secretNameSubscription": "provprofcacheServiceBusSubscriptionName"
        }
        
      ],
      "metadata": {
        "description": "Topic names & subscriptions of service bus"
      }
    },
    "svcBusExtraSubNames": {
      "type": "array",
      "defaultValue": [
        {
          "topic": "providerprofilesync",
          "subscription":"ppdeltacollect-messages",
          "secretNameSubscription": "provprofCollectServiceBusSubscriptionName"
        },
        {
          "topic": "providerprofilesync",
          "subscription":"ppdeltateachers-messages",
          "secretNameSubscription": "provprofdqtServiceBusSubscriptionName"
        },
        {
          "topic": "providerprofilesync",
          "subscription":"ppdeltas2s-messages",
          "secretNameSubscription": "provprofs2sServiceBusSubscriptionName"
        }
        
      ],
      "metadata": {
        "description": "Extra subscriptions for a service bus topics"
      }
    },
    "platformGlobalIdentifier": {
      "type": "string",
      "defaultValue": "s141"
    },
    "environmentId": {
      "type": "string",
      "allowedValues": [
        "d01",
        "d03",
        "t01",
        "t02",
        "t03",
        "p01",
        "p02"
      ]
    },
    "platformGlobalName": {
      "type": "string",
      "defaultValue": "signin"
    },
    "serviceEndpointList": {
      "type": "array",
      "defaultValue": [
        "Microsoft.Web",
        "Microsoft.Sql",
        "Microsoft.Storage",
        "Microsoft.KeyVault",
        "Microsoft.ServiceBus"
      ],
      "allowedValues": [
        "Microsoft.Web",
        "Microsoft.Sql",
        "Microsoft.Storage",
        "Microsoft.KeyVault",
        "Microsoft.ServiceBus"
      ]
    },
    "serviceBusSku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Premium",
      "metadata": {
        "description": "The messaging tier for service Bus namespace"
      }
    },
    "deployRedisCachePrivateEndpoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy a private endpoint to the Redis Cache instance"
      }
    },
    "deployAzureSearch": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy the Azure Search instance"
      }
    },
    "deployAzureSearchPrivateEndpoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy a private endpoint to the Azure Search instance"
      }
    },
    "deployamplsPrivateEndpoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy a Azure Monitor private link scope"
      }
    },
    "provisionAzureManagedGrafana": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to provision Azure Managed Grafana Instance"
      }
    },
    "deployDataFactory": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to deploy Data Factory"
      }
    },
    "deployServiceBus": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy the shared Service Bus resource"
      }
    },
    "deployVirtualNetwork": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy the virtual network template which includes the defined subnets"
      }
    },
    "sqlFirewallRulesCopyMode": {
      "type": "string",
      "defaultValue": "Parallel",
      "allowedValues": [
        "Parallel",
        "Serial"
      ],
      "metadata": {
        "description": "Mode to use in the SQL firewall rule copy function. Using Serial for the initial deployment can help eliminate conflicts."
      }
    },
    "cdnIpRules": {
        "type": "array"
    },
    "LogicAppConnectionIpRulesServiceBus": {
        "type": "array",
        "defaultValue": [
          "52.174.88.118",
          "40.91.208.65",
          "13.69.64.208/28",
          "13.69.71.192/27",
          "13.93.36.78",
          "20.86.93.32/27",
          "20.86.93.64/28",
          "20.126.243.151",
          "20.126.241.238",
          "20.103.132.139",
          "20.103.131.1",
          "20.82.15.2",
          "20.82.14.39",
          "20.103.159.225",
          "20.103.158.245"
        ]
    },
    "LogicAppConnectionIpRulesSql": {
        "type": "array",
        "defaultValue": [
          "52.174.88.118",
          "40.91.208.65",
          "13.69.64.208-13.69.64.223",
          "13.69.71.192-13.69.71.223",
          "13.93.36.78",
          "20.86.93.32-20.86.93.63",
          "20.86.93.64-20.86.93.79",
          "20.126.243.151",
          "20.126.241.238",
          "20.103.132.139",
          "20.103.131.1",
          "20.82.15.2",
          "20.82.14.39",
          "20.103.159.225",
          "20.103.158.245"
        ]
    },
    
    "LogicAppConnectionIpRulesServiceBusNeu": {
      "type": "array",
      "defaultValue": [
        "52.178.150.68",
        "94.245.91.93",
        "20.82.226.52",
        "20.82.224.59",
        "13.69.227.208/28",
        "13.69.231.192/27",
        "40.115.108.29",
        "20.82.246.112/28",
        "52.146.138.32/27",
        "20.93.81.75",
        "20.82.159.224",
        "20.82.226.163",
        "20.82.225.129"
      ]
    },
    "LogicAppConnectionIpRulesSqlNeu": {
        "type": "array",
        "defaultValue": [
          "52.178.150.68",
          "94.245.91.93",
          "20.82.226.52",
          "20.82.224.59",
          "13.69.227.208-13.69.227.223",
          "13.69.231.192-13.69.231.223",
          "40.115.108.29",
          "20.82.246.112-20.82.246.127",
          "52.146.138.32-52.146.138.63",
          "20.93.81.75",
          "20.82.159.224",
          "20.82.226.163",
          "20.82.225.129"
        ]
    },
    "azureActiveDirectoryAdmin": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory admin"
      }
    },
    "azureActiveDirectoryAdminSID": {
      "type": "string",
      "metadata": {
        "description": "Azure Active Directory admin SID"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network Name"
      }
    },
    "serviceBusNamespaceName": {
      "type": "string",
      "metadata": {
        "description": "Service Bus Name"
      }
    },
    "samltierAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "name": "samltier-g1-asp",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 3
          }
        },
        {
          "name": "samltier-g2-asp",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 3
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the saml tier App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "prestierAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "name": "prestier-g1-asp",
          "sku": {
            "name": "P1v3",
            "tier": "PremiumV3",
            "size": "P1v3",
            "family": "Pv3",
            "capacity": 3
          }
        },
        {
          "name": "prestier-g2-asp",
          "sku": {
            "name": "P1v3",
            "tier": "PremiumV3",
            "size": "P1v3",
            "family": "Pv3",
            "capacity": 3
          }
        },
        {
          "name": "prestier-g3-asp",
          "sku": {
            "name": "P1v3",
            "tier": "PremiumV3",
            "size": "P1v3",
            "family": "Pv3",
            "capacity": 3
          }
        },
        {
          "name": "prestier-g4-asp",
          "sku": {
            "name": "P1v3",
            "tier": "PremiumV3",
            "size": "P1v3",
            "family": "Pv3",
            "capacity": 3
          }
        },
        {
          "name": "prestier-g5-asp",
          "sku": {
            "name": "P1v3",
            "tier": "PremiumV3",
            "size": "P1v3",
            "family": "Pv3",
            "capacity": 3
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the front-end tier App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "midtierAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "name": "midtier-g1-asp",
          "sku": {
            "name": "P2v3",
            "tier": "PremiumV3",
            "size": "P2v3",
            "family": "Pv3",
            "capacity": 3
          }
        },
        {
          "name": "midtier-g2-asp",
          "sku": {
            "name": "P2v3",
            "tier": "PremiumV3",
            "size": "P2v3",
            "family": "Pv3",
            "capacity": 3
          }
        },
        {
          "name": "midtier-g3-asp",
          "sku": {
            "name": "P1v3",
            "tier": "PremiumV3",
            "size": "P1v3",
            "family": "Pv3",
            "capacity": 3
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the mid tier App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "backEndAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "name": "backend-g1-asp",
          "sku": {
            "name": "P2v2",
            "tier": "PremiumV2",
            "size": "P2v2",
            "family": "Pv2",
            "capacity": 1
          }
        },
        {
          "name": "backend-g2-asp",
          "sku": {
            "name": "P2v2",
            "tier": "PremiumV2",
            "size": "P2v2",
            "family": "Pv2",
            "capacity": 1
          }
        },
        {
          "name": "backend-g3-asp",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 1
          }
        },
        {
          "name": "backend-g4-asp",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 1
          }
        },
        {
          "name": "backend-g5-asp",
          "sku": {
            "name": "P1v2",
            "tier": "PremiumV2",
            "size": "P1v2",
            "family": "Pv2",
            "capacity": 1
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the back-end tier App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "utilsAppServicePlanSku": {
      "type": "array",
      "defaultValue": [
        {
          "name": "utils-asp",
          "sku": {
            "name": "S1",
            "tier": "StandardS1",
            "size": "S1",
            "family": "",
            "capacity": 3
          }
        }
      ],
      "metadata": {
        "description": "The SKU of the utils tier App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "pireanAppServicePlanSku": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The SKU of the pirean tier App Service Plan. Add another plan by copying the existing JSON and incrementing the id field by 1"
      }
    },
    "deployASP": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether to deploy the Application Service Plans"
      }
    },
    "sqlFireWallRules": {
      "type": "array",
      "defaultValue": [
        {
          "Name": "DfE-Palo-Alto-VPN",
          "DisplayName": "DfE-(Palo Alto VPN)",
          "IPRange": "208.127.46.232-208.127.46.255"
        }
      ],
      "metadata": {
        "description": "White listed SQL Server Firewall rules"
      }
    },
    "sqlPitrRetentionDays": {
      "type": "string",
      "metadata": {
        "description": "The backup retention period in days. This is how many days Point-in-Time Restore will be supported"
      }
    },
    "sqlPitrDiffBackupIntervalInHours": {
      "type": "string",
      "metadata": {
        "description": "The number of hours between each differential backup"
      }
    },
    "sqlLtrWeeklyRetention": {
      "type": "string",
      "metadata": {
        "description": "The weekly retention policy for an LTR backup in an ISO 8601 format"
      }
    },
    "sqlLtrMonthlyRetention": {
      "type": "string",
      "metadata": {
        "description": "The monthly retention policy for an LTR backup in an ISO 8601 format"
      }
    },
    "sqlLtrYearlyRetention": {
      "type": "string",
      "metadata": {
        "description": "The yearly retention policy for an LTR backup in an ISO 8601 format"
      }
    },
    "sqlLtrYearlyRetentionWeekOfYear": {
      "type": "string",
      "metadata": {
        "description": "The week of year to take the yearly backup in an ISO 8601 format"
      }
    }
  },
  "variables": {
    "redisSubnetName": "redis-sn-1",
    "azureSearchSubnetName": "azureSearch-sn-1",
    "workspaceId": "[if(equals(resourceGroup().location, 'northeurope'),resourceId('Microsoft.OperationalInsights/workspaces', tolower(concat(parameters('platformGlobalIdentifier'), parameters('environmentId'), '-neu-', parameters('platformGlobalName'),'-shd-laws'))),resourceId('Microsoft.OperationalInsights/workspaces', tolower(concat(parameters('platformGlobalIdentifier'), parameters('environmentId'), '-', parameters('platformGlobalName'),'-shd-laws'))))]",
    "sqlServerDiagSettName": "[tolower(concat(parameters('platformGlobalIdentifier'), parameters('environmentId'), '-', parameters('platformGlobalName'),'-sql-laws'))]",
    "sbnServerDiagSettName": "[tolower(concat(parameters('platformGlobalIdentifier'), parameters('environmentId'), '-', parameters('platformGlobalName'),'-sbn-laws'))]",
    "schServerDiagSettName": "[tolower(concat(parameters('platformGlobalIdentifier'), parameters('environmentId'), '-', parameters('platformGlobalName'),'-sch-laws'))]",
    "amplsSubnetName": "ampls-sn-1",
    "elasticSku": {
      "name": "ElasticPool",
      "tier": "Standard"
    },
    "emptyArray": [],
    "redisCachePrivateEndpoint": {
      "privateDnsZoneName": "privatelink.redis.cache.windows.net",
      "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
      "privateEndpointName": "[concat(parameters('redisCacheName'),'-', variables('redisSubnetName'), '-pe')]",
      "privateLinkResource": "[resourceId('Microsoft.Cache/Redis', parameters('redisCacheName'))]",
      "privateEndpointSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('redisSubnetName'))]"
    },
    "azureSearchPrivateEndpoint": {
      "privateDnsZoneName": "privatelink.search.windows.net",
      "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
      "privateEndpointName": "[concat(parameters('azureSearchName'),'-', variables('azureSearchSubnetName'), '-pe')]",
      "privateLinkResource": "[resourceId('Microsoft.Search/searchServices', parameters('azureSearchName'))]",
      "privateEndpointSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('azureSearchSubnetName'))]"
    },
    "azureMonitorPrivateEndpoint": {
      "amplsPrivateDNSZoneName": "[concat(parameters('amplsName'), '-Private-DNS-Zone')]",
      "amplsAgentsvcPrivateDnsZoneName": "privatelink.agentsvc.azure-automation.net",
      "amplsBlobPrivateDnsZoneName": "privatelink.blob.core.windows.net",
      "amplsMonitorPrivateDnsZoneName": "privatelink.monitor.azure.com",
      "amplsOPInsightODSPrivateDnsZoneName": "privatelink.ods.opinsights.azure.com",
      "amplsOPInsightOMSPrivateDnsZoneName": "privatelink.oms.opinsights.azure.com",
      "amplsVirtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
      "amplsVirtualNetworkName": "[parameters('virtualNetworkName')]",
      "amplsPrivateEndpointName": "[concat(parameters('amplsName'), '-pe')]",
      "amplsPrivateLinkResource": "[resourceId('Microsoft.insights/privateLinkScopes', parameters('amplsName'))]",
      "amplsPrivateEndpointSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('amplsSubnetName'))]"
    },
    "copy": [
      { 
        "name": "weuVnetSubnets",
        "count": "[if(not(equals(parameters('environmentId'),'d01')),sub(length(parameters('applicationSubnets')),1),length(parameters('applicationSubnets')))]",
        "input": "[resourceId(concat('s141',parameters('environmentId'),'-shd'), 'Microsoft.Network/virtualNetworks/subnets', replace(parameters('virtualNetworkName'),'neu-',''), parameters('applicationSubnets')[copyIndex('weuVnetSubnets')])]" 
      },
      { 
        "name": "pireanVnetSubnets",
        "count": "[if(not(equals(parameters('environmentId'),'p01')),sub(length(parameters('pireanSubnets')),2),length(parameters('pireanSubnets')))]",
        "input": "[resourceId(concat('s141',parameters('environmentId'),'-shd'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('pireanSubnets')[copyIndex('pireanVnetSubnets')])]" 
      },
      { 
        "name": "listOfDatabaseNames",
        "count": "[length(parameters('databaseNames'))]",
        "input": "[resourceId(concat('s141',parameters('environmentId'),'-shd'), 'Microsoft.Sql/servers/databases', replace(parameters('sqlServerName'),'neu-',''), parameters('databaseNames')[copyIndex('listOfDatabaseNames')].name)]"
  
      }
    ]
    
  },
  "resources": [
    {
      "condition": "[parameters('provisionAzureManagedGrafana')]",
      "apiVersion": "2022-05-01",
      "name": "azure-managed-grafana",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-managed-grafana.json')]"
        },
        "parameters": {
          "environmentId": {
            "value": "[parameters('environmentId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-05-01",
      "name": "log-analytics-workspace",
      "type": "Microsoft.Resources/deployments", 
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/log-analytics-workspace.json')]"
        },
        "parameters": {
          "environmentId": {
            "value": "[parameters('environmentId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2020-10-01",
      "name": "redis-cache",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/redis-cache.json')]"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[parameters('redisCacheName')]"
          },
          "redisCacheSku": {
            "value": "[parameters('redisCacheSku')]"
          }
        }
      }
    },
    {
      "apiVersion": "2022-05-01",
      "name": "redis-cache-patch-schedule",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/redis-cache-patch-schedule.json')]"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[parameters('redisCacheName')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'redis-cache')]"
      ]
    },
    {
      "condition": "[and(and(parameters('deployRedisCachePrivateEndpoint'),not(equals(resourceGroup().location, 'northeurope'))),not(or(or(contains(parameters('environmentId'),'d03'),contains(parameters('environmentId'),'t02')),contains(parameters('environmentId'),'p01'))))]",
      "apiVersion": "2020-10-01",
      "name": "redis-cache-private-endpoint",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/redis-cache-private-endpoint.json')]"
        },
        "parameters": {
          "templatesBaseUri": {
            "value": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=')]"
          },
          "privateEndpointName": {
            "value": "[variables('redisCachePrivateEndpoint').privateEndpointName]"
          },
          "privateLinkResource": {
            "value": "[variables('redisCachePrivateEndpoint').privateLinkResource]"
          },
          "privateEndpointSubnetId": {
            "value": "[variables('redisCachePrivateEndpoint').privateEndpointSubnetId]"
          },
          "privateDnsZoneName": {
            "value": "[variables('redisCachePrivateEndpoint').privateDnsZoneName]"
          },
          "virtualNetworkId": {
            "value": "[variables('redisCachePrivateEndpoint').virtualNetworkId]"
          },
          "redisCacheName": {
            "value": "[parameters('redisCacheName')]"
          },
          "redisCacheSku": {
            "value": "[parameters('redisCacheSku')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'redis-cache')]",
        "[resourceId('Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[parameters('deployamplsPrivateEndpoint')]",
      "apiVersion": "2020-10-01",
      "name": "ampls",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/ampls.json')]"
        },
        "parameters": {
          "amplsName": {
            "value": "[parameters('amplsName')]"
          },
          "appInsightsName": {
            "value": "[parameters('appInsightsName')]"
          },
          "amplsPrivateEndpointName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateEndpointName]"
          },
          "amplsPrivateLinkResource": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateLinkResource]"
          },
          "amplsPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateDnsZoneName]"
          },
          "amplsAgentsvcPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsAgentsvcPrivateDnsZoneName]"
          },
          "amplsBlobPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsBlobPrivateDnsZoneName]"
          },
          "amplsMonitorPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsMonitorPrivateDnsZoneName]"
          },
          "amplsOPInsightODSPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsOPInsightODSPrivateDnsZoneName]"
          }, 
          "amplsOPInsightOMSPrivateDnsZoneName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsOPInsightOMSPrivateDnsZoneName]"
          },
          "amplsPrivateEndpointSubnetId": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsprivateEndpointSubnetId]"
          },
          "amplsVirtualNetworkId": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsvirtualNetworkId]"
          },
          "amplsVirtualNetworkName": {
            "value": "[variables('azureMonitorPrivateEndpoint').amplsVirtualNetworkName]"
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Resources/deployments', 'virtual-network')]",
          "[resourceId('Microsoft.Resources/deployments', 'app-insights')]"
        ]
      }
    },
    {
      "name": "sql-server",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-sql.json')]"
        },
        "parameters": {
          "sqlAdministratorLogin": {
            "value": "[parameters('sqlAdministratorLogin')]"
          },
          "sqlAdministratorLoginPassword": {
            "value": "[parameters('sqlAdministratorLoginPassword')]"
          },
          "sqlserverName": {
            "value": "[parameters('sqlserverName')]"
          },
          "elasticPoolName": {
            "value": "[parameters('elasticPoolName')]"
          },
          "CHGWIP": {
            "value": "[parameters('CHGWIP')]"
          },
          "elasticPoolSku": {
            "value": "[parameters('elasticPoolSku')]"
          },
          "elasticPoolProperties": {
            "value": "[parameters('elasticPoolProperties')]"
          },
          "azureActiveDirectoryAdmin": {
            "value": "[parameters('azureActiveDirectoryAdmin')]"
          },
          "azureActiveDirectoryAdminSID": {
            "value": "[parameters('azureActiveDirectoryAdminSID')]"
          },
          "storageEndpoint": {
            "value": "[concat('https://', replace(parameters('storageAccountName'), '-', ''),'.blob.core.windows.net/')]"
          }
        },
        "dependsOn": [
          "[resourceId('Microsoft.Resources/deployments', 'log-analytics-workspace')]"
        ]
      }
    },
    {
      "condition": "[and(not(empty(parameters('databaseNames'))),not(equals(resourceGroup().location,'northeurope')))]",
      "name": "[if(empty(parameters('databaseNames')),'no-databases-to-deploy',parameters('databaseNames')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/database.json')]"
        },
        "parameters": {
          "databaseName": {
            "value": "[parameters('databaseNames')[copyIndex()].name]"
          },
          "transparentDataEncryption": {
            "value": "[parameters('transparentDataEncryption')]"
          },
          "sqlServerName": {
            "value": "[parameters('sqlServerName')]"
          },
          "elasticPoolName": {
            "value": "[parameters('elasticPoolName')]"
          },
          "databaseMaxSizeBytes": {
            "value": "[parameters('databaseNames')[copyIndex()].maxSizeBytes]"
          },
          "databaseSku": {
            "value": "[if(contains(parameters('databaseNames')[copyIndex()], 'sku'), parameters('databaseNames')[copyIndex()].sku, variables('elasticSku'))]"
          },
          "sqlPitrRetentionDays": {
            "value": "[parameters('sqlPitrRetentionDays')]"
          },
          "sqlPitrDiffBackupIntervalInHours": {
            "value": "[parameters('sqlPitrDiffBackupIntervalInHours')]"
          },
          "sqlLtrWeeklyRetention": {
            "value": "[parameters('sqlLtrWeeklyRetention')]"
          },
          "sqlLtrMonthlyRetention": {
            "value": "[parameters('sqlLtrMonthlyRetention')]"
          },
          "sqlLtrYearlyRetention": {
            "value": "[parameters('sqlLtrYearlyRetention')]"
          },
          "sqlLtrYearlyRetentionWeekOfYear": {
            "value": "[parameters('sqlLtrYearlyRetentionWeekOfYear')]"
          }
        }
      },
      "copy": {
        "name": "databasecopy",
        "count": "[length(parameters('databaseNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]"
      ]
    },
    {
      "name": "app-insights",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/app-insights.json')]"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[parameters('appInsightsName')]"
          },
          "WorkspaceResourceId": {
            "value": "[variables('workspaceId')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'log-analytics-workspace')]"
      ]
    },
    {
      "condition": "[parameters('deployDataFactory')]",
      "name": "azure-datafactory",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-data-factory.json')]"
        },
        "parameters": {
          "azureDataFactoryName": {
            "value": "[parameters('azureDataFactoryName')]"
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "storage-account",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/storage-account.json')]"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "NetFirewall":{
              "value": true
          },
          "ipRules": {
            "value": "[parameters('cdnIpRules')]"
          },
          "resourceAccessRules": {
            "value": [{
              "tenantId": "[subscription().tenantId]",
              "resourceId": "[resourceId(resourceGroup().name,'Microsoft.Sql/servers', parameters('sqlServerName'))]"
            }]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "name": "storage-account-pp",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/storage-account.json')]"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('storageAccountProvProfName')]"
          },
          "NetFirewall":{
              "value": true
          },
          "virtualNetworksSubNet": {
            "value": [
                {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'backend-g2-sn')]",
                    "action": "Allow",
                    "state": "Succeeded"
                },
                {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'backend-g3-sn')]",
                    "action": "Allow",
                    "state": "Succeeded"
                },
                {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'backend-g4-sn')]",
                    "action": "Allow",
                    "state": "Succeeded"
                },
                {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'backend-g5-sn')]",
                    "action": "Allow",
                    "state": "Succeeded"
                },
                {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'midtier-g3-sn')]",
                    "action": "Allow",
                    "state": "Succeeded"
                }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtual-network')]"
      ]
    },
    {
      "condition": "[parameters('deployAzureSearch')]",
      "name": "azure-search",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-search.json')]"
        },
        "parameters": {
          "azureSearchName": {
            "value": "[parameters('azureSearchName')]"
          },
          "diagnosticSettingsName": {
            "value": "[variables('schServerDiagSettName')]"
          },
          "omsWorkspaceId": {
            "value": "[variables('workspaceId')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployAzureSearchPrivateEndpoint')]",
      "apiVersion": "2020-10-01",
      "name": "azure-search-private-endpoint",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-search-private-endpoint.json')]"
        },
        "parameters": {
          "privateEndpointName": {
            "value": "[variables('azureSearchPrivateEndpoint').privateEndpointName]"
          },
          "privateLinkResource": {
            "value": "[variables('azureSearchPrivateEndpoint').privateLinkResource]"
          },
          "privateEndpointSubnetId": {
            "value": "[variables('azureSearchPrivateEndpoint').privateEndpointSubnetId]"
          },
          "privateDnsZoneName": {
            "value": "[variables('azureSearchPrivateEndpoint').privateDnsZoneName]"
          },
          "virtualNetworkId": {
            "value": "[variables('azureSearchPrivateEndpoint').virtualNetworkId]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'virtual-network')]",
        "[resourceId('Microsoft.Resources/deployments', 'azure-search')]"
      ]
    },
    {
      "name": "azure-cdn",
      "condition": "[not(equals(resourceGroup().location,'northeurope'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-cdn.json')]"
        },
        "parameters": {
          "cdnProfileName": {
            "value": "[parameters('azureCdnName')]"
          },
          "azureCdnSku": {
            "value": "[parameters('azureCdnSku')]"
          }
        }
      }
    },
    {
      "name": "azure-cdn-endpoint",
      "type": "Microsoft.Resources/deployments",
      "condition": "[not(equals(resourceGroup().location,'northeurope'))]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-cdn-endpoint.json')]"
        },
        "parameters": {
          "cdnEndpointName": {
            "value": "[parameters('cdnEndpointName')]"
          },
          "cdnProfileName": {
            "value": "[parameters('azureCdnName')]"
          },
          "originName": {
            "value": "[replace(parameters('originName'), '-', '')]"
          },
          "originHostname": {
            "value": "[parameters('originHostname')]"
          },
          "customDomainName": {
            "value": "[parameters('customDomainName')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'storage-account')]",
        "[resourceId('Microsoft.Resources/deployments', 'azure-cdn')]"
      ]
    },
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "apiVersion": "2020-10-01",
      "name": "virtual-network",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/network.template.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templatesBaseUri": {
            "value": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "destructiveVirtualNetworkDeploy": {
            "value": "[parameters('destructiveVirtualNetworkDeploy')]"
          },
          "redisSubnet": {
            "value": "[array(variables('redisSubnetName'))]"
          },
          "azureSearchSubnet": {
            "value": "[array(variables('azureSearchSubnetName'))]"
          },
          "amplsSubnet": {
            "value": "[array(variables('amplsSubnetName'))]"
          },
          "applicationSubnets": {
            "value": "[parameters('applicationSubnets')]"
          },
          "serviceEndpointList": {
            "value": "[parameters('serviceEndpointList')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "apiVersion": "2020-10-01",
      "name": "get-subnet-resourceid-list",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/getSubnetResourceIdList.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "subnetConfiguration": {
            "value": "[if(parameters('deployVirtualNetwork'), reference('virtual-network').outputs.applicationSubnetConfiguration.value, variables('emptyArray'))]"
          }
        }
      }
    },
    {
      "condition": "[parameters('deployServiceBus')]",
      "apiVersion": "2020-10-01",
      "name": "service-bus",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/service-bus.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serviceBusNamespaceName": {
            "value": "[parameters('serviceBusNamespaceName')]"
          },
          "serviceBusSku": {
            "value": "[parameters('serviceBusSku')]"
          },
          "diagnosticSettingsName": {
            "value": "[variables('sbnServerDiagSettName')]"
          },
          "omsWorkspaceId": {
            "value": "[variables('workspaceId')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'log-analytics-workspace')]"
      ]
    },
    {
      "condition": "[parameters('deployASP')]",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('samltierAppServicePlanSku')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('samltierAppServicePlanSku')[copyIndex()].name)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('samltierAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "Linux"
          },
          "appServicePlanIsLinux": {
            "value": true
          },
          "zoneredundant": {
            "value": "[parameters('samltierAppServicePlanSku')[copyIndex()].zoneredundant]"
          },
          "autoscaleEnabled": {
            "value": "[parameters('samltierAppServicePlanSku')[copyIndex()].autoscaleEnabled]"
          },
          "defaultCapacity": {
            "value": "[parameters('samltierAppServicePlanSku')[copyIndex()].sku.capacity]"
          },
          "maximumCapacity": {
            "value": "[parameters('samltierAppServicePlanSku')[copyIndex()].maximumCapacity]"
          },
          "metricThresholdToScaleOut": {
            "value": "[parameters('samltierAppServicePlanSku')[copyIndex()].metricThresholdToScaleOut]"
          },
          "metricThresholdToScaleIn": {
            "value": "[parameters('samltierAppServicePlanSku')[copyIndex()].metricThresholdToScaleIn]"
          }
        }
      },
      "copy": {
        "name": "FeAspCopy",
        "count": "[length(parameters('samltierAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[parameters('deployASP')]",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('prestierAppServicePlanSku')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('prestierAppServicePlanSku')[copyIndex()].name)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('prestierAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "Linux"
          },
          "appServicePlanIsLinux": {
            "value": true
          },
          "zoneredundant": {
            "value": "[parameters('prestierAppServicePlanSku')[copyIndex()].zoneredundant]"
          },
          "autoscaleEnabled": {
            "value": "[parameters('prestierAppServicePlanSku')[copyIndex()].autoscaleEnabled]"
          },
          "defaultCapacity": {
            "value": "[parameters('prestierAppServicePlanSku')[copyIndex()].sku.capacity]"
          },
          "maximumCapacity": {
            "value": "[parameters('prestierAppServicePlanSku')[copyIndex()].maximumCapacity]"
          },
          "metricThresholdToScaleOut": {
            "value": "[parameters('prestierAppServicePlanSku')[copyIndex()].metricThresholdToScaleOut]"
          },
          "metricThresholdToScaleIn": {
            "value": "[parameters('prestierAppServicePlanSku')[copyIndex()].metricThresholdToScaleIn]"
          }
        }
      },
      "copy": {
        "name": "FeAspCopy",
        "count": "[length(parameters('prestierAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[parameters('deployASP')]",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('midtierAppServicePlanSku')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('midtierAppServicePlanSku')[copyIndex()].name)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('midtierAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "Linux"
          },
          "appServicePlanIsLinux": {
            "value": true
          },
          "zoneredundant": {
            "value": "[parameters('midtierAppServicePlanSku')[copyIndex()].zoneredundant]"
          },
          "autoscaleEnabled": {
            "value": "[parameters('midtierAppServicePlanSku')[copyIndex()].autoscaleEnabled]"
          },
          "defaultCapacity": {
            "value": "[parameters('midtierAppServicePlanSku')[copyIndex()].sku.capacity]"
          },
          "maximumCapacity": {
            "value": "[parameters('midtierAppServicePlanSku')[copyIndex()].maximumCapacity]"
          },
          "metricThresholdToScaleOut": {
            "value": "[parameters('midtierAppServicePlanSku')[copyIndex()].metricThresholdToScaleOut]"
          },
          "metricThresholdToScaleIn": {
            "value": "[parameters('midtierAppServicePlanSku')[copyIndex()].metricThresholdToScaleIn]"
          }
        }
      },
      "copy": {
        "name": "FeAspCopy",
        "count": "[length(parameters('midtierAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[parameters('deployASP')]",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('backEndAppServicePlanSku')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('backEndAppServicePlanSku')[copyIndex()].name)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "[if(or(or(or(contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g2'),contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g3')),contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g4')),contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g5')),'Windows','Linux')]"
          },
          "appServicePlanIsLinux": {
            "value": "[not(or(or(or(contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g2'),contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g3')),contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g4')),contains(parameters('backEndAppServicePlanSku')[copyIndex()].name,'g5')))]"
          },
          "zoneredundant": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].zoneredundant]"
          },
          "autoscaleEnabled": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].autoscaleEnabled]"
          },
          "defaultCapacity": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].sku.capacity]"
          },
          "maximumCapacity": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].maximumCapacity]"
          },
          "metricThresholdToScaleOut": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].metricThresholdToScaleOut]"
          },
          "metricThresholdToScaleIn": {
            "value": "[parameters('backEndAppServicePlanSku')[copyIndex()].metricThresholdToScaleIn]"
          }

        }
      },
      "copy": {
        "name": "FeAspCopy",
        "count": "[length(parameters('backEndAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[and(equals(parameters('environmentId'), 'd001'),parameters('deployASP'))]",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('utilsAppServicePlanSku')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('utilsAppServicePlanSku')[copyIndex()].name)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('utilsAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "Linux"
          },
          "appServicePlanIsLinux": {
            "value": true
          },
          "defaultCapacity": {
            "value": "[parameters('utilsAppServicePlanSku')[copyIndex()].sku.capacity]"
          }
        }
      },
      "copy": {
        "name": "FeAspCopy",
        "count": "[length(parameters('utilsAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[and(not(equals(parameters('environmentId'), 't03')),parameters('deployASP'))]",
      "apiVersion": "2020-10-01",
      "name": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('pireanAppServicePlanSku')[copyIndex()].name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/app-service-plan.json')]"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[concat(parameters('platformGlobalIdentifier'),parameters('environmentId'),'-',parameters('pireanAppServicePlanSku')[copyIndex()].name)]"
          },
          "appServicePlanSku": {
            "value": "[parameters('pireanAppServicePlanSku')[copyIndex()].sku]"
          },
          "appServicePlanOS": {
            "value": "Linux"
          },
          "appServicePlanIsLinux": {
            "value": true
          },
          "defaultCapacity": {
            "value": "[parameters('pireanAppServicePlanSku')[copyIndex()].sku.capacity]"
          }
        }
      },
      "copy": {
        "name": "FeAspCopy",
        "count": "[length(parameters('pireanAppServicePlanSku'))]",
        "mode": "Parallel"
      }
    },
    {
      "condition": "[and(not(empty(parameters('TopicNames'))),not(equals(resourceGroup().location, 'northeurope')))]",
      "name": "[if(empty(parameters('TopicNames')),'no-topics-to-deploy', concat(parameters('serviceBusNamespaceName'), '/', parameters('TopicNames')[copyIndex()].name))]",
      "type": "Microsoft.ServiceBus/namespaces/topics",
      "apiVersion": "2022-01-01-preview",
      "properties": {
        "maxMessageSizeInKilobytes": 1024,
        "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "enableBatchedOperations": true,
        "status": "Active",
        "supportOrdering": true,
        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S",
        "enablePartitioning": false,
        "enableExpress": false
      
      },
      "copy": {
        "name": "TopicNames",
        "count": "[length(parameters('TopicNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('TopicNames'))),not(equals(resourceGroup().location, 'northeurope')))]",
      "name": "[if(empty(parameters('TopicNames')),'no-subscriptions-to-deploy', concat(parameters('serviceBusNamespaceName'), '/', parameters('TopicNames')[copyIndex()].name, '/', parameters('TopicNames')[copyIndex()].subscription))]",
      "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
      "apiVersion": "2022-01-01-preview",
      "properties": {
        "isClientAffine": false,
        "lockDuration": "PT5M",
        "requiresSession": false,
        "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
        "deadLetteringOnMessageExpiration": false,
        "deadLetteringOnFilterEvaluationExceptions": true,
        "maxDeliveryCount": 10,
        "status": "Active",
        "enableBatchedOperations": true,
        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S"
      },
      "copy": {
        "name": "TopicNames",
        "count": "[length(parameters('TopicNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'audit')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'securealert')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'providerprofilesync')]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('svcBusExtraSubNames'))),not(equals(resourceGroup().location, 'northeurope')))]",
      "name": "[if(empty(parameters('svcBusExtraSubNames')),'no-extra-subscriptions-to-deploy', concat(parameters('serviceBusNamespaceName'), '/', parameters('svcBusExtraSubNames')[copyIndex()].topic, '/', parameters('svcBusExtraSubNames')[copyIndex()].subscription))]",
      "type": "Microsoft.ServiceBus/namespaces/topics/subscriptions",
      "apiVersion": "2022-01-01-preview",
      "properties": {
        "isClientAffine": false,
        "lockDuration": "PT5M",
        "requiresSession": false,
        "defaultMessageTimeToLive": "P10675199DT2H48M5.4775807S",
        "deadLetteringOnMessageExpiration": false,
        "deadLetteringOnFilterEvaluationExceptions": true,
        "maxDeliveryCount": 10,
        "status": "Active",
        "enableBatchedOperations": true,
        "autoDeleteOnIdle": "P10675199DT2H48M5.4775807S"
      },
      "copy": {
        "name": "svcBusExtraSubNames",
        "count": "[length(parameters('svcBusExtraSubNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'audit')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'securealert')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'providerprofilesync')]"
      ]
    },
    {
      "condition": "[and(parameters('deployVirtualNetwork'), parameters('deployServiceBus'))]",
      "apiVersion": "2020-10-01",
      "name": "service-bus-firewall-rule",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/service-bus-network-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serviceBusNamespaceName": {
            "value": "[parameters('serviceBusNamespaceName')]"
          },
          "subnetResourceIdList": {
            "value": "[if(parameters('deployVirtualNetwork'),union(reference('get-subnet-resourceid-list', '2020-10-01').outputs.subnetResourceIdList.value,variables('pireanVnetSubnets')) , union(reference('get-subnet-resourceid-list', '2020-10-01').outputs.subnetResourceIdList.value,variables('pireanVnetSubnets')))]"
          },
          "ipAddresses": {
            "value": "[if(equals(resourceGroup().location, 'northeurope'),parameters('LogicAppConnectionIpRulesServiceBusNeu'),parameters('LogicAppConnectionIpRulesServiceBus'))]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]"
      ]
    },    
    {
      "condition": "[parameters('deployVirtualNetwork')]",
      "apiVersion": "2020-10-01",
      "name": "sql-server-firewall-rule",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/sql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[parameters('sqlServerName')]"
          },
          "subnetResourceIdList": {
            "value": "[if(and(equals(resourceGroup().location, 'northeurope'),parameters('deployVirtualNetwork')),reference('get-subnet-resourceid-list', '2020-10-01').outputs.subnetResourceIdList.value, reference('get-subnet-resourceid-list', '2020-10-01').outputs.subnetResourceIdList.value)]"
          },
          "copyMode": {
            "value": "[parameters('sqlFirewallRulesCopyMode')]"
          },
          "ipAddresses": {
            "value": "[if(equals(resourceGroup().location, 'northeurope'),parameters('LogicAppConnectionIpRulesSqlNeu'),parameters('LogicAppConnectionIpRulesSql'))]"
          },
          "firewallRuleNamePrefix": {
            "value": "logicAppConnections"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]"
      ]
    },
    {
      "condition": "[and(and(equals(resourceGroup().location, 'northeurope'),parameters('deployVirtualNetwork')), parameters('deployServiceBus'))]",
      "apiVersion": "2020-10-01",
      "name": "service-bus-firewall-rule-weu",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/service-bus-network-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serviceBusNamespaceName": {
            "value": "[replace(parameters('serviceBusNamespaceName'),'neu-','')]"
          },
          "subnetResourceIdList": {
            "value": "[if(and(equals(resourceGroup().location, 'northeurope'),parameters('deployVirtualNetwork')),union(reference('get-subnet-resourceid-list', '2020-10-01').outputs.subnetResourceIdList.value,variables('weuVnetSubnets')) , variables('weuVnetSubnets'))]"
          },
          "ipAddresses": {
            "value": "[if(equals(resourceGroup().location, 'northeurope'),union(parameters('LogicAppConnectionIpRulesServiceBus'),parameters('LogicAppConnectionIpRulesServiceBusNeu')),parameters('LogicAppConnectionIpRulesServiceBus'))]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]"
      ]
    }, 
    {
      "condition": "[equals(resourceGroup().location, 'northeurope')]",
      "apiVersion": "2020-10-01",
      "name": "sql-server-failover-group",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/sql-server-failover-groups.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "sqlserverName": {
            "value": "[replace(parameters('sqlServerName'),'neu-','')]"
          },
          "neuSqlServerId": {
            "value": "[resourceId(resourceGroup().name,'Microsoft.Sql/servers', parameters('sqlServerName'))]"
          },
          "databaseNames": {
            "value": "[variables('listOfDatabaseNames')]"
        
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]"        
      ]
    },
    {
      "condition": "[equals(resourceGroup().location, 'northeurope')]",
      "apiVersion": "2020-10-01",
      "name": "[concat('sql-server-firewall-rule-neu','-',parameters('sqlFireWallRules')[copyIndex()].Name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/sql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[parameters('sqlServerName')]"
          },
          "subnetResourceIdList": {
            "value": "[createArray()]"
          },
          "copyMode": {
            "value": "[parameters('sqlFirewallRulesCopyMode')]"
          },
          "ipAddresses": {
            "value": ["[parameters('sqlFireWallRules')[copyIndex()].IPRange]"]
          },
          "firewallRuleNamePrefix": {
            "value": "[parameters('sqlFireWallRules')[copyIndex()].DisplayName]"
          }
        }
      },
      "copy": {
        "name": "ipaddresscopy",
        "count": "[length(parameters('sqlFireWallRules'))]",
        "mode": "Parallel"
      },   
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]" 
      ]
    },
    {
      "condition": "[not(equals(resourceGroup().location, 'northeurope'))]",
      "apiVersion": "2020-10-01",
      "name": "[concat('sql-server-firewall-rule-weu','-',parameters('sqlFireWallRules')[copyIndex()].Name)]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/sql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[parameters('sqlServerName')]"
          },
          "subnetResourceIdList": {
            "value": "[createArray()]"
          },
          "copyMode": {
            "value": "[parameters('sqlFirewallRulesCopyMode')]"
          },
          "ipAddresses": {
            "value": ["[parameters('sqlFireWallRules')[copyIndex()].IPRange]"]
          },
          "firewallRuleNamePrefix": {
            "value": "[parameters('sqlFireWallRules')[copyIndex()].DisplayName]"
          }
        }
      },
      "copy": {
        "name": "ipaddresscopy",
        "count": "[length(parameters('sqlFireWallRules'))]",
        "mode": "Parallel"
      },   
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]" 
      ]
    },
    {
      "condition": "[equals(resourceGroup().location, 'northeurope')]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "name": "azure-redis-disast-rec",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-redis-geo-link.json')]"
        },
        "parameters": {
          "redisCacheNamePrimary": {
            "value": "[replace(parameters('redisCacheName'),'neu-','')]"
          },
          "redisCacheNameSecondary": {
            "value": "[parameters('redisCacheName')]"
          },
          "secondaryResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "secondaryResourceGroupLocation": {
            "value": "[resourceGroup().location]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'redis-cache')]"
      ]
    },
    {
      "condition": "[equals(resourceGroup().location, 'northeurope')]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "name": "azure-service-bus-disast-rec",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-service-bus-disast-rec.json')]"
        },
        "parameters": {
          "primaryNamespaceId": {
            "value": "[concat(subscription().id,'/resourceGroups/',replace(resourceGroup().name,'neu-',''),'/providers/Microsoft.ServiceBus/namespaces/',replace(parameters('serviceBusNamespaceName'),'neu-',''))]"
          },
          "primaryNamespaceName": {
            "value": "[replace(parameters('serviceBusNamespaceName'),'neu-','')]"
          },
          "secondaryNamespaceId": {
            "value": "[concat(subscription().id,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ServiceBus/namespaces/',parameters('serviceBusNamespaceName'))]"
          },
          "aliasName": {
            "value": "[replace(parameters('serviceBusNamespaceName'),'neu-','geo-')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "add-sql-server-name-key-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "platformGlobalServerName"
          },
          "secretValue": {
            "value": "[if(equals(resourceGroup().location, 'westeurope'),concat(parameters('sqlServerName'),'.database.windows.net'),concat(replace(parameters('sqlServerName'),'neu-',''),'-fog.database.windows.net'))]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]"
      ]
    },
    {
      "condition": "[not(empty(parameters('databaseNames')))]",
      "name": "[if(empty(parameters('databaseNames')),'no-databases-to-add-in-keyvault',parameters('databaseNames')[copyIndex()].secretName)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "[parameters('databaseNames')[copyIndex()].secretName]"
          },
          "secretValue": {
            "value": "[parameters('databaseNames')[copyIndex()].name]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "copy": {
        "name": "databasecopy",
        "count": "[length(parameters('databaseNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'sql-server')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "add-appInsights-instrumentation-key-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "[if(equals(resourceGroup().location, 'westeurope'),'appInsightsInstrumentationKey','neu-AppInsightsInstrumentationKey')]"
          },
          "secretValue": {
            "value": "[reference('app-insights').outputs.InstrumentationKey.value]"
          },
          "contentType": {
            "value": "AppInsights instrumentation key"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'app-insights')]"
      ]
    },
    {
      "condition": "[equals(resourceGroup().location, 'northeurope')]",
      "name": "add-redis-conn-str-neu-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "neu-redisConn"
          },
          "secretValue": {
            "value": "[format('redis://:{0}@{1}.redis.cache.windows.net:6380',listkeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2023-08-01').primaryKey,  parameters('redisCacheName'))]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'redis-cache')]"
      ]
    },
    {
      "condition": "[equals(resourceGroup().location, 'northeurope')]",
      "name": "add-redis-conn-str-geo-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "redisConn"
          },
          "secretValue": {
            "value": "[format('redis://:{0}@{1}.redis.cache.windows.net:6380',listkeys(resourceId(replace(resourceGroup().name,'neu-',''), 'Microsoft.Cache/Redis',  replace(parameters('redisCacheName'),'neu-','')), '2023-08-01').primaryKey,  replace(parameters('redisCacheName'),'neu-',''))]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'redis-cache')]"
      ]
    },
    {
      "condition": "[equals(resourceGroup().location, 'westeurope')]",
      "name": "add-redis-conn-str-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "redisConn"
          },
          "secretValue": {
            "value": "[format('redis://:{0}@{1}.redis.cache.windows.net:6380',listkeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2023-08-01').primaryKey, parameters('redisCacheName'))]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'redis-cache')]"
      ]
    },
    {
      "name": "add-service-bus-key-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "sharedServiceBusConnectionString"
          },
          "secretValue": {
            "value": "[if(equals(resourceGroup().location, 'westeurope'), listkeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', parameters('serviceBusNamespaceName'), 'RootManageSharedAccessKey'), '2017-04-01').primaryConnectionString, listkeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', parameters('serviceBusNamespaceName'), 'RootManageSharedAccessKey'), '2017-04-01').aliasPrimaryConnectionString)]"
          },
          "contentType": {
            "value": "Shared service bus connection string"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('TopicNames'))),not(equals(resourceGroup().location, 'northeurope')))]",
      "name": "[if(empty(parameters('TopicNames')),'no-TopicNames-to-add-in-keyvault', parameters('TopicNames')[copyIndex()].secretNameTopic)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "[parameters('TopicNames')[copyIndex()].secretNameTopic]"
          },
          "secretValue": {
            "value": "[parameters('TopicNames')[copyIndex()].name]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "copy": {
        "name": "topicscopy",
        "count": "[length(parameters('TopicNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'audit')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'securealert')]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('TopicNames'))),not(equals(resourceGroup().location, 'northeurope')))]",
      "name": "[if(empty(parameters('TopicNames')),'no-Subscriptions-to-add-in-keyvault', parameters('TopicNames')[copyIndex()].secretNameSubscription)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "[parameters('TopicNames')[copyIndex()].secretNameSubscription]"
          },
          "secretValue": {
            "value": "[parameters('TopicNames')[copyIndex()].subscription]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "copy": {
        "name": "subscriptionscopy",
        "count": "[length(parameters('TopicNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'audit')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'securealert')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'providerprofilesync')]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('svcBusExtraSubNames'))),not(equals(resourceGroup().location, 'northeurope')))]",
      "name": "[if(empty(parameters('svcBusExtraSubNames')),'no-extra-Subscriptions-to-add-in-keyvault', parameters('svcBusExtraSubNames')[copyIndex()].secretNameSubscription)]",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "[parameters('svcBusExtraSubNames')[copyIndex()].secretNameSubscription]"
          },
          "secretValue": {
            "value": "[parameters('svcBusExtraSubNames')[copyIndex()].subscription]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "copy": {
        "name": "subscriptionscopy",
        "count": "[length(parameters('svcBusExtraSubNames'))]",
        "mode": "Parallel"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'service-bus')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'audit')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'securealert')]",
        "[resourceId('Microsoft.ServiceBus/namespaces/topics', parameters('serviceBusNamespaceName'), 'providerprofilesync')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "add-Search-Name-key-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "[if(equals(resourceGroup().location, 'westeurope'),'azureSearchName','neu-AzureSearchName')]"
          },
          "secretValue": {
            "value": "[parameters('azureSearchName')]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'azure-search')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "add-Search-Apikey-key-vault-secret",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[replace(resourceGroup().name,'neu-','')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/key-vault-secret.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "secretName": {
            "value": "[if(equals(resourceGroup().location, 'westeurope'),'azureSearchkey','neu-AzureSearchkey')]"
          },
          "secretValue": {
            "value": "[reference('azure-search', '2020-10-01').outputs.azureSearchKey.value]"
          },
          "contentType": {
            "value": ""
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'azure-search')]"
      ]
    },
    {
      "apiVersion": "2020-10-01",
      "name": "managed-idenity-provider-profile-storage",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('templatesBaseUri'),'&repo=DFE-Digital/login.dfe.devops&ref=',parameters('branch'),'&token=', parameters('AccessToken'),'&file=Archives/templates/azure-managed-Identity.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "identityName": {
            "value": "[parameters('storageIdenityName')]"
          },
          "role": {
            "value": "StorageBlobDataOwner"
          },
          "roleDefinitionId": {
            "value": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'storage-account-pp')]"
      ]
    }
  ],
  "outputs": {}
}